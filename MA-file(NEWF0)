#------------------------------------------------IMPORT THƯ VIỆN-------------------------------------------
import random
import copy
import pandas as pd
import numpy as np
import itertools



#------------------------------------KHAI BÁO CÁC HÀM ĐỌC INPUT VÀ XUẤT OUTPUT-------------------------------
def read_file(file_path):

    df = pd.read_csv(file_path)

    return df.to_dict('records')

def read_input(file_path):
    input = read_file("./input/input1.csv")[0]
    capacity = input["capacity"]
    current_capacity = input["current_capacity"]
    input.pop("capacity")
    input.pop("current_capacity")
    suppliers = input

    flag = True
    for supplier in suppliers:
        if suppliers[supplier] <= current_capacity:
            flag = False

    if(flag):
        raise "Please move to the next day. Capacity returns to the original"
    return [capacity,current_capacity,suppliers]

def write_output(output,file_path):   

    with open(file_path,'w') as f:
        for individual in output:
            f.write(str(len(individual)))
            f.write('\n')
            for gen in individual:
                for bit in gen:
                    f.write(bit + ',')
                f.write('\n')

            f.write('\n')



#--------------------------------------------KHAI BÁO 1 SỐ HÀM DÙNG CHUNG---------------------------------

#Nhân bản 1 con bất kì
def cloneIndividual(individual):        
    return copy.deepcopy(individual)

#HÀM EVALUATE: Check xem có ngày nào bị lố capacity không
def evaluate(individual, capacity, suppliers, current_capacity = 0):
    
    if(current_capacity == 0):
        current_capacity = capacity

    idx = 0
    for gen in individual:             #gen là số ngày
                                       #idx là số thứ tự của supplier trong ngày/gen đó
                                       #ứng với mỗi idx là tên của supplier/bit
                                       #supplier[bit] là stock của supplier
        if(idx == 0):
            sum = 0
            for bit in gen:
                sum = sum + suppliers[bit]
                if (sum > current_capacity):
                    return -1
        else:
            sum = 0
            for bit in gen:
                sum = sum + suppliers[bit]
                if (sum > capacity):
                    return -1
        idx = idx + 1
    return len(individual)

#Tính tổng stock của các supplier trong 1 ngày bất kì (Trong fix)
def sum_gen(gen, suppliers):      
    sum = 0
    for bit in gen:
        sum = sum + suppliers[bit]

    return sum

#HÀM FIX
def fix(individual, suppliers, capacity,current_capacity):       
    count = 0
    idx_gen = -1           #chưa biết gen thứ mấy nên tạm để -1
                           #idx: thứ tự của bit trong 1 gen
    #đếm số gen cần fix, >=2 => từ chối fix
    for idx, gen in enumerate(individual):      #enumrate là vòng lặp vừa lấy chỉ số vừa lấy giá trị, lấy đoạn gen có thứ tự là idx
        if(idx == 0):
            sum = 0
            for bit in gen:
                sum = sum + suppliers[bit]
                if (sum > current_capacity):     #tìm đoạn gen có tổng stock > cap -> thứ tự của gen/ngày đó
                    idx_gen = idx
                    count = count + 1
                    if (count >= 2):
                        return [False, individual]
        else:
            sum = 0
            for bit in gen:
                sum = sum + suppliers[bit]
                if (sum > capacity):
                    idx_gen = idx
                    count = count + 1
                    if (count >= 2):
                        return [False, individual]

    #idx_gen vị trí gen cần fix
    idx_min = 0
    gen_fix = individual[idx_gen]        #bóc đoạn gen có thứ tự idx_gen trong individual
    min_bit_value = suppliers[gen_fix[idx_min]]       #bit nhỏ nhất trong gen

    #tìm idx_min vị trí bit, min_bit_value giá trị bit của bit nhỏ nhất tron gen cần fix
    for idx, bit in enumerate(gen_fix): 
        if suppliers[bit] < min_bit_value:
            min_bit_value = suppliers[bit]
            idx_min = idx
    
    gen_fix_clone = gen_fix.copy()     #clone gen cần fix ra để thử fix
    bit_pop = gen_fix_clone[idx_min]  #giá trị bit lấy ra của gen gần fix
    gen_fix_clone.pop(idx_min)        #xóa bit nhỏ nhất trong gen cần fix đã clone    #.pop = lấy ra

    #kiểm tra gen sau khi lấy bit nhỏ nhất ra thỏa capacity hay không trong 2 trường hợp
    if(idx_gen == 0):
        if (sum_gen(gen_fix_clone, suppliers) > current_capacity):  
            return [False, individual]
    else:
        if (sum_gen(gen_fix_clone, suppliers) > capacity):  
            return [False, individual]

    #thêm bit pop từ gen fix vào các gen khác
    for idx, gen in enumerate(individual):
        if (idx == idx_gen):
            continue
        gen_clone = gen.copy()
        gen_clone.append(bit_pop)     #.append: thêm ==> thêm supplier bị cắt vào gen đang xét
        if idx == 0:
            if (sum_gen(gen_clone, suppliers) < current_capacity):
                individual[idx] = gen_clone
                individual[idx_gen] = gen_fix_clone
                return [True, individual]
        else:
            if (sum_gen(gen_clone, suppliers) < capacity):
                individual[idx] = gen_clone
                individual[idx_gen] = gen_fix_clone
                return [True, individual]

    return [False, individual]

#Xếp chromosome sao cho stock của các ngày giảm dần (nhiều -> ít) (trong sort_population)
def sort_individual(individual):
    individual = sorted(individual, key=len, reverse=True)
    return individual

#HÀM ENHANCE HELPER
def enhance_helper(individual,capacity, suppliers,current_capacity,idx_gen1, idx_gen2): 

    individual = copy.deepcopy(individual)

    if(len(individual)==0):
        return [False, individual]
   
    len_gen1 = len(individual[idx_gen1])
    len_gen2 = len(individual[idx_gen2])

    if(len_gen1>=len_gen2):
        individual[idx_gen1] = individual[idx_gen1] + individual[idx_gen2]
        individual.pop(idx_gen2)
    else:
        individual[idx_gen2] = individual[idx_gen2] + individual[idx_gen1]
        individual.pop(idx_gen1)

    if (evaluate(individual, capacity, suppliers,current_capacity) == -1):  #vị trí -1 là vị trí cuối
        return fix(individual,suppliers,capacity,current_capacity)
    else:
        return [True, individual]

#HÀM ENHANCE: enhance 1 cá thể
def enhance(individual, capacity, suppliers, current_capacity,depth_enhance,count=0):
    
    len_individual = len(individual)
    count = count + 1
    #print(count)
    if(count >= depth_enhance):
        return [True, individual] 

    for i in range(0,len_individual-1):
        for j in range(i+1,len_individual):
            result = enhance_helper(individual,capacity,suppliers,current_capacity,i,j)
            if(result[0]):
                return enhance(result[1],capacity,suppliers,current_capacity,depth_enhance,count)

    return [True, individual]

#Tạo population mới sao cho số lượng ngày giảm dần (nhiều -> ít) (trong GA)
def sort_population(population):
    new_population = []

    for individual in population:
        new_population.append(sort_individual(individual))
    return new_population



#-------------------------------------------TẠO ĐỜI FO------------------------------------------------------

def swap1d(arr:list, pos1:int,pos2:int) -> bool:

    temp = arr[pos1]
    arr[pos1] = arr[pos2]
    arr[pos2] = temp

    return arr

def getSuppliers(suppliers:dict):
    newSuppliers = []

    for key in suppliers.keys():
        newSuppliers.append({
            'key':key,
            'value':suppliers[key]
        })
    
    return sorted(newSuppliers,key=lambda x: x['value'], reverse=True)
    
def seeding_help(seeding,suppliers:list,capacity,is_first_gen):

    if(is_first_gen):
        result = []
        result.append(suppliers[seeding])
        suppliers.pop(seeding)
    else:
        result = []
        result.append(suppliers[0])
        suppliers.pop(0)

    
    current_sum = result[0]['value']
    

    for (index,supplier) in enumerate(suppliers):
        if(current_sum + supplier['value'] <= capacity):
            result.append(supplier)
            current_sum += supplier['value']
            suppliers.pop(index)

    return result

def seeding(suppliers,capacity):
    suppliers = getSuppliers(suppliers)
    population = []

    for i in range(0,len(suppliers)):
        results = []
        suppliers2 = copy.deepcopy(suppliers)
        is_first_gen = True
        while(len(suppliers2)!=0):
            results.append(seeding_help(i,suppliers2,capacity,is_first_gen))
            is_first_gen = False

        population.append(results)

    return population

def permutation(individual1, number_of_internal_change):

    sub_population = []

    count = 0
    for i in range(0,len(individual1)):
        for j in range(i+1,len(individual1) ):
            individual = copy.deepcopy(individual1)
            individual =  swap1d(individual,i,j)
            sub_population.append(individual)
            count = count + 1

            if(count >= number_of_internal_change):
                return sub_population
                
    return sub_population

def makeF0(suppliers,capacity, popsize):
    population = seeding(suppliers,capacity)
    n_suppliers = len(suppliers.keys())
    new_population = []


    number_of_internal_change = popsize/n_suppliers -1 
    # 100/10 - 1 = 9

    for i in range(len(population)):
        new_population.append(population[i])
        new_population = new_population + permutation(population[i],number_of_internal_change)


    return new_population

def standard_F0(suppliers,capacity,popsize):

    final_population = makeF0(suppliers,capacity,popsize)

    new_final_solution = []
    for individual in final_population:
        new_individual = []
        for gen in individual:
            new_bit = []
            for bit in gen :
                new_bit.append(bit['key'])
            new_individual.append(new_bit)
        new_final_solution.append(new_individual)

    return new_final_solution

#-------------------------------------------SELECTION--------------------------------------------------------

#Đếm tổng số ngày của từng chromosome (Trong selection_population)
def getScore(individual):         
    return len(individual)

#Sort chrosome theo chiều số ngày giảm dần (tốt -> xấu) + lấy % con tốt nhất (n_selection)
def selection_population(population,n_selection):
    population.sort(key=getScore)        #Sort là hàm mặc định từ nhỏ -> lớn, ở đây Sort số ngày
    population = population[:n_selection]
    return population



#------------------------------------------------CROSSOVER-------------------------------------------------

#Chọn ngẫu nhiên 2 chromosomes
def getRandomTwoIndividual(populations):
 
    if(len(populations) == 1):
        raise ValueError('There is only one supplier left')

    len_populations = len(populations)
    
    random1 = random.randint(0, len_populations-1)
    random2 = random.randint(0, len_populations-1)

    while (random2 == random1):
        random2 = random.randint(0, len_populations-1)
   
    return [copy.deepcopy(populations[random1]), copy.deepcopy(populations[random2])]

#HÀM CROSS HELPER
def crossover_helper(individual1, individual2,random_index1,random_index2):
    
    clone_individual1 = copy.deepcopy(individual1)

    new_individual1 = []
    new_individual2 = []

    for gen in individual1:
        for bit in gen:
            new_individual1.append(bit)

    for gen in individual2:
        for bit in gen:
            new_individual2.append(bit)

    clone_new_individua1 = copy.deepcopy(new_individual1)
    clone_new_individua2 = copy.deepcopy(new_individual2)
    
    bit_map1 = {}

    for i in range(random_index1,random_index2  + 1):
        bit_map1[clone_new_individua2[i]]= clone_new_individua1[i]

    for index,value in enumerate(new_individual1):
        if index >= random_index1 and index <= random_index2:
            new_individual1[index] = new_individual2[index]
        elif value in bit_map1:
            x = bit_map1[value]
            while(x in bit_map1):
                x = bit_map1[x]
            new_individual1[index] = x

    count = 0
    for index1,gen in enumerate(clone_individual1):
        for index2, bit in enumerate(gen):
            clone_individual1[index1][index2] = new_individual1[count]
            count +=1
    
    return clone_individual1

#HÀM CROSSOVER: crossover 2 cá thể
def crossover(individual1, individual2):      #chọn vị trí 2 point bị cắt

    len_individual = 0
    
    for gen in individual1:
        for bit in gen:
            len_individual += 1

            
    random_index1 = random.randint(0,len_individual-1)
    random_index2 = random.randint(random_index1,len_individual-1)

    return [crossover_helper(individual1,individual2,random_index1,random_index2), 
            crossover_helper(individual2,individual1,random_index1,random_index2)]



#------------------------------------------------MUTATION--------------------------------------------------

#Chọn ngẫu nhiên 1 chromosome trong population
def getRandomIndividual(populations):     
    len_populations = len(populations)
    random_index = random.randint(0, len_populations-1)
    
    return copy.deepcopy(populations[random_index])

#Chọn ngẫu nhiên thứ tự của 1 bit trong chromosome. random1:thứ tự ngày, randome2: thứ tự supplier trong ngày (trong mutation_helper)
def getRamdomIndex(individual):
    len1 = len(individual)
    random1 = random.randint(0, len1-1)   #chọn ngẫu nhiên số thứ tự từ 0 tới len-1

    len2 = len(individual[random1])
    random2 = random.randint(0, len2-1)

    return [random1, random2]

#HÀM MUTATION HELPER
def mutation_helper(individual,capacity,suppliers,current_capacity, depth_enhance):
    #return new individual (deep copy)
    individual = copy.deepcopy(individual) 

    #print(individual)

    k = 1
    while k <= 50:
        random1 = getRamdomIndex(individual)
        random2 = getRamdomIndex(individual)

        temp = individual[random1[0]][random1[1]]
        individual[random1[0]][random1[1]] = individual[random2[0]][random2[1]]
        individual[random2[0]][random2[1]] = temp

        k=k+1
    fix_individual = [True, individual]
    if( evaluate(individual,capacity,suppliers,current_capacity) == -1):
        fix_individual = fix(individual,suppliers,capacity,current_capacity)
    
    if(fix_individual[0]):
        [enhance_success, enhance_child] = enhance(individual,suppliers,current_capacity,depth_enhance)
        if(enhance_success):
            return [enhance_success, enhance_child]
        else:
            return fix_individual
    else:
        temp = individual[random1[0]][random1[1]]
        individual[random1[0]][random1[1]] = individual[random2[0]][random2[1]]
        individual[random2[0]][random2[1]] = temp

    return [False, individual]

#HÀM MUTATION HELPER: mutation 1 cá thể
def mutation(individual,capacity,suppliers,current_capacity, depth_enhance,n_bit_mutation=5):
    individual = copy.deepcopy(individual) 

    result = False
    for i in range(0,n_bit_mutation):
        new_individual = mutation_helper(individual,capacity,suppliers,current_capacity,depth_enhance)
        if(new_individual[0] == True):
            result = True
        individual = copy.deepcopy(new_individual[1])
    return [result,individual]

#--------------------------------------XẾP CÁC OPERATOR THÀNH 1 BÀI GA----------------------------------------

#CROSSOVER
def crossover_population(population, capacity, suppliers, n_crossover,depth_enhance, current_capacity = 0):

    if current_capacity == 0:
        current_capacity = capacity

    count = 0

    crossover_done = []

    i = 0
    while(i < n_crossover):        
        [individual1, individual2] = getRandomTwoIndividual(population)

        # Nếu đã crossover rồi thì bỏ qua lấy cặp khác
        if([individual1,individual2] in crossover_done):
            continue

        i = i + 1
        crossover_done.append([individual1,individual2])

        [child1, child2] = crossover(individual1, individual2)


        #con thu nhat
        if (evaluate(child1, capacity, suppliers, current_capacity) == -1) and len(child1) != 0:
            [can_fix, new_child] = fix(child1, suppliers, capacity, current_capacity)
            if (can_fix == True):
                [enhance_success, enhance_child1] = enhance(new_child,capacity,suppliers,current_capacity,depth_enhance=10)
                count = count + 1
                if(enhance_success):
                    population.append(enhance_child1)
                else:
                    population.append(new_child)
        elif len(child1) != 0:
            count = count + 1
            [enhance_success, enhance_child1] = enhance(child1,capacity,suppliers,current_capacity,depth_enhance)
            if(enhance_success):
                    population.append(enhance_child1)
            else:
                population.append(child1)

        #con thu hai
        if (evaluate(child2, capacity, suppliers,current_capacity) == -1) and len(child2) != 0:
            [can_fix, new_child] = fix(child2, suppliers, capacity, current_capacity)
            if (can_fix == True):
                count = count + 1
                [enhance_success, enhance_child2] = enhance(new_child,capacity,suppliers,current_capacity,depth_enhance)
                if(enhance_success):
                    population.append(enhance_child2)
                else:
                    population.append(new_child)
                    
        elif len(child2) != 0:
            count = count + 1
            [enhance_success, enhance_child2] = enhance(child2,capacity,suppliers,current_capacity,depth_enhance)
            if(enhance_success):
                    population.append(enhance_child2)
            else:
                population.append(child2)

    for individual in population:
        for index,gen in  enumerate(individual):
            if (len(gen)==0):
                del individual[index]

    return [count,population]

#MUTATION
def mutation_population(population, capacity, suppliers, n_mutation,current_capacity,n_bit_mutation,depth_enhance):

    count = 0
    for _ in range(0, n_mutation):
        individual = getRandomIndividual(population)
        result = mutation(individual, capacity, suppliers,current_capacity,depth_enhance,n_bit_mutation)
        if (result[0]):
            population.append(individual)
            count = count+1
    return [count, population]

#GA
def GA(population, capacity,suppliers, n_GA, n_crossover,n_selection, output ="", current_capacity = 0,n_bit_mutation = 50, n_max_crossover = 30, n_max_mutation=15, depth_enhance = 100):
    
    n_select_percent = n_selection
    n_selection = int(n_selection * len(population))
    
    Fi = population
    count = 1
    
    if(output != ""):       #nếu output khác rỗng (rỗng: ko có data) thì mở file output
        f = open(output, "w")

    for _ in range(n_GA):
        #fi-1
        Fi_1 = copy.deepcopy(Fi)
        N0 = len(Fi_1)
        Fi = selection_population(Fi,n_selection)    
        
        print("Selection: ", len(Fi))

        Fi = copy.deepcopy(Fi)

        #lặp tối đa n_max_crossover lần
        for i in range(0,n_max_crossover):
            Fi = crossover_population(Fi, capacity, suppliers, 1,depth_enhance,current_capacity)[1]
            #Fi = sort_population(Fi)
            #nếu thỏa thì dừng
            if(len(Fi)>=(n_crossover + n_select_percent)*N0):
                break

        
        #kiểm tra đủ 85% chưa để thêm từ đời fi-1
        if(len(Fi)<(n_crossover + n_select_percent)*N0):
            for individual in Fi_1:
                if individual not in Fi: #not in khử trùng
                    Fi.append(individual)
                if(len(Fi) >= (n_crossover + n_select_percent) *N0):
                    break

        print("Selection + Crossover", len(Fi))
        

        #Fi = sort_population(Fi)
        #lặp tối đa n_max_mutation lần
        for i in range(0,n_max_mutation):
            Fi = mutation_population(Fi,capacity,suppliers,1,current_capacity,n_bit_mutation,depth_enhance)[1]
            #nếu thỏa thì dừng
            if(len(Fi)>=N0):
                break   

        #kiểm tra sau khi mutation đủ 100% chưa để thêm từ đời fi-1
        if(len(Fi)<N0):
            for individual in Fi_1:
                if individual not in Fi: #not in khử trùng
                    Fi.append(individual)
                if(len(Fi) >= N0):
                    break
        #Fi = sort_population(Fi)


        Fi = Fi[:N0]

        print("Selection + Crossover + Mutation", len(Fi))

        Fi = sort_population(Fi)
        Fi = selection_population(Fi,len(population))
        if(output != ""):
            f.write('GENERATION '+str(count)+'\n')
            for _ in Fi:
                f.write(str(_)+ ' ===> Days required: '+ str(len(_))+'\n') 
        else:
            print('Đời F'+ str(count))
            for _ in Fi:
                print(str(_))

        print(len(Fi))
        print(f"Progress {(count)/n_GA *100: .2f}%")
        
        count = count + 1
 
    return Fi

#-------------------------------------------NHẬP CÁC THÔNG SỐ GA----------------------------------------------

[capacity,current_capacity,suppliers] = read_input("./input/input1.csv")

F0 = standard_F0(suppliers,capacity,240)

import time
start = time.time()

ga = GA(
    population = F0,
    capacity = capacity,
    suppliers = suppliers,
    current_capacity = current_capacity,
    n_GA = 10,
    n_selection = 0.3,
    n_crossover = 0.6,
    #n_mutation = 0.10,  
    n_bit_mutation = 0,     #đổi cùng lúc
    n_max_crossover = 50,
    n_max_mutation = 50,
    depth_enhance = 2,
    output = "output.txt"
)

end = time.time()
print(end - start)

write_output(ga,"./output/output.csv")